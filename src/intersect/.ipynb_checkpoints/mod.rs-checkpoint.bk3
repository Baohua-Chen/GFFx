use anyhow::Result;
use clap::{Parser, ArgGroup};
use memmap2::Mmap;
use std::{
    fs::File,
    path::{Path, PathBuf},
    io::{Write, BufRead, BufReader, SeekFrom, Seek},
    time::Instant,
    sync::Arc,
};
use rayon::prelude::*;
use rayon::ThreadPoolBuilder;
use byteorder::{LittleEndian, ReadBytesExt};
use rustc_hash::{FxHashMap, FxHashSet};
use crate::{CommonArgs, load_sqs, append_suffix, load_gof};

/// Arguments for region intersection operations
#[derive(Parser, Debug)]
#[command(
    about = "Extract models by a region or regions from a BED file",
    long_about = "This tool extracts features and their parent models that intersect with specified regions"
)]
#[clap(group(
    ArgGroup::new("regions").required(true).args(&["region", "bed"])
))]
#[clap(group(
    ArgGroup::new("mode").args(&["contained", "contains_region", "overlap"])
))]
pub struct IntersectArgs {
    #[clap(flatten)]
    pub common: CommonArgs,

    /// Single region in format "chr:start-end"
    #[arg(short = 'r', long, group = "regions")]
    pub region: Option<String>,

    /// BED file containing regions
    #[arg(short = 'b', long, group = "regions")]
    pub bed: Option<PathBuf>,

    /// Only return features fully contained within regions
    #[arg(short = 'c', long, group = "mode")]
    pub contained: bool,

    /// Only return features that fully contain the regions
    #[arg(short = 'C', long, group = "mode")]
    pub contains_region: bool,

    /// Return any overlapping features (default)
    #[arg(short = 'O', long, group = "mode")]
    pub overlap: bool,

    /// Invert the selection (exclude matching features)
    #[arg(short = 'I', long, default_value_t = false)]
    pub invert: bool,
}

#[derive(Debug)]
pub struct IndexData {
    pub chr_entries: FxHashMap<u32, Vec<(u32, u32, u32)>>,
    pub feature_ids: Vec<String>,
    pub seqid_to_num: FxHashMap<String, u32>,
}

impl IndexData {
    pub fn load(index_prefix: &Path) -> Result<Self> {
        let (seqid_list, _) = load_sqs(index_prefix)?;
        let seqid_to_num: FxHashMap<_, _> = seqid_list
            .into_iter()
            .enumerate()
            .map(|(i, seqid)| (seqid, i as u32))
            .collect();

        let fts_path = append_suffix(index_prefix, ".fts");
        let feature_ids = Self::load_feature_ids(&fts_path)?;

        let rit_path = append_suffix(index_prefix, ".rit");
        let rix_path = append_suffix(index_prefix, ".rix");
        let chr_entries = Self::load_region_index(&rit_path, &rix_path)?;

        Ok(Self {
            chr_entries,
            feature_ids,
            seqid_to_num,
        })
    }

    fn load_feature_ids(path: &Path) -> Result<Vec<String>> {
        let file = File::open(path)?;
        BufReader::new(file)
            .lines()
            .map(|res| res.map_err(Into::into))
            .collect()
    }

    fn load_region_index(
        rit_path: &Path,
        rix_path: &Path,
    ) -> Result<FxHashMap<u32, Vec<(u32, u32, u32)>>> {
        let mut rix_file = File::open(rix_path)?;
        let mut offsets = Vec::new();
        while let Ok(offset) = rix_file.read_u32::<LittleEndian>() {
            offsets.push(offset);
        }

        let mut rit_file = BufReader::new(File::open(rit_path)?);
        let mut chr_entries = FxHashMap::default();

        for seq_num in 0..(offsets.len() - 1) {
            let start = offsets[seq_num] as u64;
            let end = offsets[seq_num + 1] as u64;
            
            rit_file.seek(SeekFrom::Start(start))?;
            
            let mut entries = Vec::new();
            while rit_file.stream_position()? < end {
                entries.push((
                    rit_file.read_u32::<LittleEndian>()?,
                    rit_file.read_u32::<LittleEndian>()?,
                    rit_file.read_u32::<LittleEndian>()?,
                ));
            }
            
            chr_entries.insert(seq_num as u32, entries);
        }

        Ok(chr_entries)
    }
}

fn parse_region(region: &str, seqid_map: &FxHashMap<String, u32>) -> Result<(u32, u32, u32)> {
    let parts: Vec<&str> = region.split(':').collect();
    if parts.len() != 2 {
        anyhow::bail!("Invalid region format, expected 'chr:start-end'");
    }

    let seqid = parts[0];
    let range: Vec<&str> = parts[1].split('-').collect();
    if range.len() != 2 {
        anyhow::bail!("Invalid range format, expected 'start-end'");
    }

    let start = range[0].parse::<u32>()?;
    let end = range[1].parse::<u32>()?;

    let seq_num = seqid_map.get(seqid)
        .ok_or_else(|| anyhow::anyhow!("Sequence ID not found: {}", seqid))?;

    Ok((*seq_num, start, end))
}

fn parse_bed_file(bed_path: &Path, seqid_map: &FxHashMap<String, u32>) -> Result<Vec<(u32, u32, u32)>> {
    let content = std::fs::read_to_string(bed_path)?;
    let mut regions = Vec::new();
    
    for line in content.lines() {
        if line.is_empty() || line.starts_with('#') || line.starts_with("track") {
            continue;
        }
        
        let fields: Vec<&str> = line.split('\t').collect();
        if fields.len() < 3 {
            continue;
        }
        
        if let Some(&seq_num) = seqid_map.get(fields[0]) {
            regions.push((
                seq_num,
                fields[1].parse::<u32>()?,
                fields[2].parse::<u32>()?,
            ));
        }
    }
    
    Ok(regions)
}

#[derive(Debug, Clone, Copy)]
enum OverlapMode {
    Contained,
    ContainsRegion,
    Overlap,
}

fn query_features(
    index_prefix: &Path,
    regions: &[(u32, u32, u32)],
    contained: bool,
    contains_region: bool,
    invert: bool,
    threads: usize,
    verbose: bool,
) -> Result<Vec<(String, u32, u32)>> {
    let index_data = Arc::new(IndexData::load(index_prefix)?);

    if verbose {
        eprintln!("[DEBUG] Loaded index with {} sequences", index_data.chr_entries.len());
    }

    let mut regions = regions.to_vec();
    regions.sort_unstable_by_key(|&(chr, start, _)| (chr, start));

    let mode = if contained {
        OverlapMode::Contained
    } else if contains_region {
        OverlapMode::ContainsRegion
    } else {
        OverlapMode::Overlap
    };

    let results = if threads > 1 {
        let pool = ThreadPoolBuilder::new().num_threads(threads).build()?;
        pool.install(|| {
            let deduped: FxHashSet<_> = regions
                .par_iter()
                .flat_map(|&(chr, region_start, region_end)| {
                    let Some(features) = index_data.chr_entries.get(&chr) else {
                        return vec![];
                    };

                    find_overlaps(
                        features,
                        &[&(chr, region_start, region_end)],
                        &index_data.feature_ids,
                        mode,
                        invert,
                    )
                })
                .collect();

            deduped.into_iter().collect()
        })
    } else {
        let deduped: FxHashSet<_> = regions
            .iter()
            .flat_map(|&(chr, region_start, region_end)| {
                let Some(features) = index_data.chr_entries.get(&chr) else {
                    return vec![];
                };

                find_overlaps(
                    features,
                    &[&(chr, region_start, region_end)],
                    &index_data.feature_ids,
                    mode,
                    invert,
                )
            })
            .collect();

        deduped.into_iter().collect()
    };

    Ok(results)
}

fn _find_overlaps_bk(
    features: &[(u32, u32, u32)],
    regions: &[&(u32, u32, u32)],
    feature_ids: &[String],
    mode: OverlapMode,
    invert: bool,
) -> Vec<(String, u32, u32)> {
    let mut results = Vec::new();
    let check_condition = match mode {
        OverlapMode::Contained => |fs, fe, rs, re| fs >= rs && fe <= re,
        OverlapMode::ContainsRegion => |fs, fe, rs, re| fs <= rs && fe >= re,
        OverlapMode::Overlap => |fs, fe, rs, re| fe >= rs && fs <= re,
    };

    for &&(_, region_start, region_end) in regions {
        let end_ptr = features.partition_point(|&(s,_,_)| s <= region_end);
        
        for &(feat_start, feat_end, feat_id) in &features[..end_ptr] {
            if check_condition(feat_start, feat_end, region_start, region_end) ^ invert {
                if let Some(id) = feature_ids.get(feat_id as usize) {
                    results.push((id.clone(), feat_start, feat_end));
                }
            }
        }
    }
    
    results
}

fn find_overlaps(
    features: &[(u32, u32, u32)],  // (start, end, feature_id)
    regions: &[&(u32, u32, u32)],  // (seq_num, start, end)
    feature_ids: &[String],
    mode: OverlapMode,
    invert: bool,
) -> Vec<(String, u32, u32)> {
    let mut results = Vec::new();
    let mut feature_ptr = 0;

    for &&(_, region_start, region_end) in regions {
        // Binary search to find first potentially overlapping feature
        feature_ptr = match features[feature_ptr..].binary_search_by(|&(s, _, _)| s.cmp(&region_start)) {
            Ok(i) => i + feature_ptr,   // Exact match
            Err(i) => i + feature_ptr,  // Insertion point
        };

        // Linear scan through overlapping features
        while feature_ptr < features.len() {
            let (feat_start, feat_end, feat_id) = features[feature_ptr];
            
            // Early exit if we've passed the query region
            if feat_start > region_end {
                break;
            }

            // Check overlap based on selected mode
            let matches = match mode {
                OverlapMode::Contained => 
                    feat_start >= region_start && feat_end <= region_end,
                OverlapMode::ContainsRegion => 
                    feat_start <= region_start && feat_end >= region_end,
                OverlapMode::Overlap => 
                    feat_end >= region_start && feat_start <= region_end,
            };

            // Apply inversion if requested
            if matches ^ invert {
                if let Some(id) = feature_ids.get(feat_id as usize) {
                    results.push((id.clone(), feat_start, feat_end));
                }
            }

            feature_ptr += 1;
        }
    }

    results
}

fn extract_gff_blocks(
    gff_path: &Path,
    gof_map: &FxHashMap<u32, (u64, u64)>,
    feature_ids: &[u32],
    output: &Option<PathBuf>,
    verbose: bool,
) -> Result<()> {
    let start_time = Instant::now();
    let file = File::open(gff_path)?;
    let mmap = unsafe { Mmap::map(&file)? };

    let mut sorted_ids = feature_ids.to_vec();
    sorted_ids.sort_unstable_by_key(|&id| gof_map[&id].0);

    let mut writer: Box<dyn Write> = match output {
        Some(path) => Box::new(File::create(path)?),
        None => Box::new(std::io::stdout()),
    };

    let mut buffer = Vec::with_capacity(2 * 1024 * 1024);
    for &id in &sorted_ids {
        match gof_map.get(&id) {
            Some(&(start, end)) => {
                buffer.extend_from_slice(&mmap[start as usize..end as usize]);
            }
            None => {
                eprintln!("[WARN] Feature ID {} not found in GOF map", id);
            }
        }
    }
    writer.write_all(&buffer)?;

    if verbose {
        eprintln!("[TIME] GFF extraction: {:.2?}", start_time.elapsed());
    }
    Ok(())
}




pub fn run(args: &IntersectArgs) -> Result<()> {
    let total_start = Instant::now();
    
    let init_start = Instant::now();
    let (_, seqid_map) = load_sqs(&args.common.input)?;
    if args.common.verbose {
        eprintln!("[TIME] Initialization: {:.2?}", init_start.elapsed());
    }

    let parse_start = Instant::now();
    let regions = if let Some(bed_path) = &args.bed {
        parse_bed_file(bed_path, &seqid_map)?
    } else if let Some(region_str) = &args.region {
        vec![parse_region(region_str, &seqid_map)?]
    } else {
        anyhow::bail!("No region source specified");
    };
    if args.common.verbose {
        eprintln!("[TIME] Region parsing: {:.2?}", parse_start.elapsed());
    }

    let load_start = Instant::now();
    let index_data = Arc::new(IndexData::load(&args.common.input)?);
    if args.common.verbose {
        eprintln!("[TIME] Index loading: {:.2?}", load_start.elapsed());
    }

    let query_start = Instant::now();
    let results = query_features(
        &args.common.input,
        &regions,
        args.contained,
        args.contains_region,
        args.invert,
        args.common.threads,
        args.common.verbose,
    )?;
    if args.common.verbose {
        eprintln!("[TIME] Feature query: {:.2?}", query_start.elapsed());
        eprintln!("[INFO] Found {} features", results.len());
    }

    let prep_start = Instant::now();
    let gof_entries = load_gof(&args.common.input)?;
    let gof_map: FxHashMap<_, _> = gof_entries
        .into_iter()
        .map(|e| (e.feature_id, (e.start_offset, e.end_offset)))
        .collect();

    let unique_ids: FxHashSet<_> = results.iter().map(|(id, _, _)| id).collect();
    
    let feature_num_ids: Vec<_> = index_data.feature_ids.iter()
        .enumerate()
        .filter_map(|(i, id)| unique_ids.contains(id).then_some(i as u32))
        .collect();
    
    if args.common.verbose {
        eprintln!("[TIME] Preparation: {:.2?}", prep_start.elapsed());
    }

    extract_gff_blocks(
        &args.common.input,
        &gof_map,
        &feature_num_ids,
        &args.common.output,
        args.common.verbose,
    )?;

    if args.common.verbose {
        eprintln!("[TIME] Total execution: {:.2?}", total_start.elapsed());
    }
    Ok(())
}